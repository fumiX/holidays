plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.30'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.slf4j:slf4j-simple:1.7.30'

}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

signing {
    def signingKey = findProperty("GPG_SIGNING_KEY") // ORG_GRADLE_PROJECT_GPG_SIGNING_KEY -> ascii armored private PGP key
    def signingPassword = findProperty("GPG_SIGNING_KEY_PASSWORD") // ORG_GRADLE_PROJECT_GPG_SIGNING_KEY_PASSWORD
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign configurations.archives
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = "holidays"
            version = project.version

            from components.java

            pom {
                name = "holidays"
                description = "Legal holidays, weekends, workdays by date (for Germany, but extendable)"
                url = "https://github.com/fumiX/holidays"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'michael-fuchs'
                        name = 'Michael Fuchs'
                        email = 'michael.fuchs@fumix.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/fumix/holidays.git'
                    developerConnection = 'scm:git:git@github.com:fumix/holidays.git'
                    url = 'https://github.com/fumix/holidays'
                }
            }
        }
    }
    // telling gradle to publish artifact to local directory (3)
    repositories {
        maven {
            url "file:/${project.projectDir}/build/artifacts"
        }
//        maven {
//            name = "OSSRH"
//
//            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//
//            credentials {
//                username = System.getenv("OSSRH_MAVEN_USERNAME")
//                password = System.getenv("OSSRH_MAVEN_PASSWORD")
//            }
//        }
    }
}
